"""
@Article{SimoSerraSIGGRAPH2016,
   author    = {Edgar Simo-Serra and Satoshi Iizuka and Kazuma Sasaki and Hiroshi Ishikawa},
   title     = {{Learning to Simplify: Fully Convolutional Networks for Rough Sketch Cleanup}},
   journal   = "ACM Transactions on Graphics (SIGGRAPH)",
   year      = 2016,
   volume    = 35,
   number    = 4,
}

@Article{SimoSerraTOG2018,
   author    = {Edgar Simo-Serra and Satoshi Iizuka and Hiroshi Ishikawa},
   title     = {{Mastering Sketching: Adversarial Augmentation for Structured Prediction}},
   journal   = "ACM Transactions on Graphics (TOG)",
   year      = 2018,
   volume    = 37,
   number    = 1,
}
"""

import torch.nn as nn

model_simplification = nn.Sequential(
    nn.Conv2d(1, 48, (5, 5), (2, 2), (2, 2)),
    nn.ReLU(),
    nn.Conv2d(48, 128, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(128, 128, (3, 3), (2, 2), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(128, 256, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(256, 256, (3, 3), (2, 2), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(256, 512, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(512, 1024, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(1024, 1024, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(1024, 1024, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(1024, 1024, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(1024, 512, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(512, 256, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.ConvTranspose2d(256, 256, (4, 4), (2, 2), (1, 1), (0, 0)),
    nn.ReLU(),
    nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(256, 128, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.ConvTranspose2d(128, 128, (4, 4), (2, 2), (1, 1), (0, 0)),
    nn.ReLU(),
    nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(128, 48, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.ConvTranspose2d(48, 48, (4, 4), (2, 2), (1, 1), (0, 0)),
    nn.ReLU(),
    nn.Conv2d(48, 24, (3, 3), (1, 1), (1, 1)),
    nn.ReLU(),
    nn.Conv2d(24, 1, (3, 3), (1, 1), (1, 1)),
    nn.Sigmoid(),
)
